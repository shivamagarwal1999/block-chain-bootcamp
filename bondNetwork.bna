PK
     /~$OÃ»Â¡Ã¤vÂ¡  Â¡     package.json{"engines":{"composer":"^0.20.0"},"name":"bond-network","version":"0.2.6-deploy.0","description":"Bond Reference Data Sharing Business Network","networkImage":"https://hyperledger.github.io/composer-sample-networks/packages/bond-network/networkimage.svg","networkImageanimated":"https://hyperledger.github.io/composer-sample-networks/packages/bond-network/networkimageanimated.svg","scripts":{"prepublish":"mkdirp ./dist && composer archive create  --sourceType dir --sourceName . -a ./dist/bond-network.bna","pretest":"npm run lint","lint":"eslint .","postlint":"npm run licchk","licchk":"license-check-and-add","postlicchk":"npm run doc","doc":"jsdoc --pedantic --recurse -c jsdoc.json","test":"mocha -t 0 --recursive","deploy":"./scripts/deploy.sh"},"repository":{"type":"git","url":"https://github.com/hyperledger/composer-sample-networks.git"},"keywords":["bonds","reference data","finance","composer","composer-network"],"author":"Hyperledger Composer","license":"Apache-2.0","devDependencies":{"chai":"^3.5.0","composer-admin":"^0.20.0-0","composer-cli":"^0.20.0-0","composer-client":"^0.20.0-0","composer-common":"^0.20.0-0","composer-connector-embedded":"^0.20.0-0","eslint":"^3.6.1","istanbul":"^0.4.5","jsdoc":"^3.5.5","license-check-and-add":"~2.3.0","mkdirp":"^0.5.1","mocha":"^3.2.0","moment":"^2.17.1"},"license-check-and-add-config":{"folder":".","license":"LICENSE.txt","exact_paths_method":"EXCLUDE","exact_paths":["composer-logs","dist","node_modules","out",".git"],"file_type_method":"EXCLUDE","file_types":[".yml"],"insert_license":false,"license_formats":{"js|cto|acl":{"prepend":"/*","append":" */","eachLine":{"prepend":" * "}},"md":{"file":"../../markdown-license.txt"}}}}PK
     /~$Oâ€”yÃ´|Â¹  Â¹  	   README.md# Bond Network

> The Bond Network allows the issuer of a bond to update the bond information whilst other members of the business network can only read the bond data.

This business network defines:

**Participants**
`Issuer` `Member`

**Assets**
`BondAsset`

**Transactions**
`PublishBond`

The `PublishBond` transaction submitted by an `Issuer` participant will create a new `BondAsset`.

To test this Business Network Definition in the **Test** tab:

Create a `Issuer` participant:

```
{
  "$class": "org.acme.bond.Issuer",
  "memberId": "memberId:1",
  "name": "Billy Thompson"
}
```

Create a `Member` participant:

```
{
  "$class": "org.acme.bond.Member",
  "memberId": "memberId:1",
  "name": "Jenny Jones"
}
```

Submit a `PublishBond` transaction:

```
{
  "$class": "org.acme.bond.PublishBond",
  "ISINCode": "ISINCode:1234",
  "bond": {
    "$class": "org.acme.bond.Bond",
    "instrumentId": [],
    "exchangeId": [],
    "maturity": "2017-07-13T09:39:05.369Z",
    "parValue": 1000,
    "faceAmount": 1000,
    "paymentFrequency": {
      "$class": "org.acme.bond.PaymentFrequency",
      "periodMultiplier": 0,
      "period": "DAY"
    },
    "dayCountFraction": "",
    "issuer": "resource:org.acme.bond.Issuer#memberId:1"
  }
}
```

The `PublishBond` transaction will create a new `BondAsset` in the Asset Registry.

Congratulations!

## License <a name="license"></a>
Hyperledger Project source code files are made available under the Apache License, Version 2.0 (Apache-2.0), located in the LICENSE file. Hyperledger Project documentation files are made available under the Creative Commons Attribution 4.0 International License (CC-BY-4.0), available at http://creativecommons.org/licenses/by/4.0/.PK
     /~$Oâ€ºxÃ”  Ã”     permissions.acl/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Access Control List for the bond data
 */
rule Issuer {
    description: "Allow full access to the issuer of a bond"
    participant(i): "org.acme.bond.Issuer"
    operation: ALL
    resource(a): "org.acme.bond.BondAsset"
    condition: (a.bond.issuer.memberId === i.memberId)
    action: ALLOW
}

rule Default {
    description: "Allow read access"
    participant: "org.acme.bond.*"
    operation: ALL
    resource: "org.acme.bond.*"
    action: ALLOW
}

rule SystemACL {
    description:  "System ACL to permit all access"
    participant: "org.hyperledger.composer.system.Participant"
    operation: ALL
    resource: "org.hyperledger.composer.system.**"
    action: ALLOW
}

rule NetworkAdminUser {
    description: "Grant business network administrators full access to user resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "**"
    action: ALLOW
}

rule NetworkAdminSystem {
    description: "Grant business network administrators full access to system resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "org.hyperledger.composer.system.**"
    action: ALLOW
}PK
     /~$O               models/PK
     /~$OÂ¾Â¡Â³
y  y     models/bond.cto/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Definition of a Bond, based on the FpML schema:
 * http://www.fpml.org/spec/fpml-5-3-2-wd-2/html/reporting/schemaDocumentation/schemas/fpml-asset-5-3_xsd/elements/bond.html
 *
 */
namespace org.acme.bond

enum CouponType {
  o FIXED
  o FLOATING
}

participant Member identified by memberId {
  o String memberId
  o String name
}

participant Issuer extends Member {
}

enum PeriodEnum {
  o DAY
  o WEEK
  o MONTH
  o YEAR
}

concept PaymentFrequency {
  o Integer periodMultiplier
  o PeriodEnum period
}

concept Bond {
  o String[] instrumentId
  o String description optional
  o String currency optional
  o String[] exchangeId
  o String clearanceSystem optional
  o String definition optional
  o String seniority optional
  o CouponType couponType optional
  o Double couponRate optional
  o DateTime maturity
  o Double parValue
  o Double faceAmount
  o PaymentFrequency paymentFrequency
  o String dayCountFraction
  --> Issuer issuer
}

asset BondAsset identified by ISINCode {
  o String ISINCode
  o Bond bond
}

transaction PublishBond {
  o String ISINCode
  o Bond bond
}
PK
     /~$O               lib/PK
     /~$O(p2jâ€ž  â€ž     lib/logic.js/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* global getAssetRegistry getFactory */

/**
 * Publish a new bond
 * @param {org.acme.bond.PublishBond} publishBond - the publishBond transaction
 * @transaction
 */
async function publish(publishBond) {  // eslint-disable-line no-unused-vars

    const registry = await getAssetRegistry('org.acme.bond.BondAsset');
    const factory = getFactory();

    // Create the bond asset.
    const bondAsset = factory.newResource('org.acme.bond', 'BondAsset', publishBond.ISINCode);
    bondAsset.bond = publishBond.bond;

    // Add the bond asset to the registry.
    await registry.add(bondAsset);
}PK 
     /~$OÃ»Â¡Ã¤vÂ¡  Â¡                   package.jsonPK 
     /~$Oâ€”yÃ´|Â¹  Â¹  	             Ã‹  README.mdPK 
     /~$Oâ€ºxÃ”  Ã”               Â«
  permissions.aclPK 
     /~$O                        Â¬  models/PK 
     /~$OÂ¾Â¡Â³
y  y               Ã‘  models/bond.ctoPK 
     /~$O                        w  lib/PK 
     /~$O(p2jâ€ž  â€ž               â„¢  lib/logic.jsPK      Å’  G     
